AWSTemplateFormatVersion: '2010-09-09'
Description: 'TrumenApp Analytics and Fraud Detection Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  VPCCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for VPC'
  
  DruidInstanceType:
    Type: String
    Default: 'm5.xlarge'
    Description: 'EC2 instance type for Druid cluster'

Resources:
  # VPC and Networking
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-vpc'

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-public-subnet-1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-public-subnet-2'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-private-subnet-1'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-private-subnet-2'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-igw'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'trumen-${Environment}-public-rt'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # S3 Buckets for Data Storage
  RawEventsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'trumen-${Environment}-raw-events-${AWS::AccountId}'
      VersioningConfiguration:
        Status: 'Enabled'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProcessedDataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'trumen-${Environment}-processed-data-${AWS::AccountId}'
      VersioningConfiguration:
        Status: 'Enabled'
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 7
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 30
            StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DruidDeepStorageBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'trumen-${Environment}-druid-storage-${AWS::AccountId}'
      VersioningConfiguration:
        Status: 'Enabled'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Kinesis Data Stream
  GameEventsStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: !Sub 'trumen-${Environment}-game-events'
      ShardCount: 3
      RetentionPeriodHours: 168  # 7 days
      StreamEncryption:
        EncryptionType: 'KMS'
        KeyId: 'alias/aws/kinesis'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Glue Database and Tables
  GlueDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Sub 'trumen_${Environment}_analytics'
        Description: 'TrumenApp Analytics Database'

  LocationEventsTable:
    Type: 'AWS::Glue::Table'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: 'location_events'
        TableType: 'EXTERNAL_TABLE'
        Parameters:
          has_encrypted_data: 'false'
          classification: 'parquet'
        StorageDescriptor:
          Columns:
            - Name: 'timestamp'
              Type: 'bigint'
            - Name: 'user_id'
              Type: 'string'
            - Name: 'session_id'
              Type: 'string'
            - Name: 'platform'
              Type: 'string'
            - Name: 'latitude'
              Type: 'double'
            - Name: 'longitude'
              Type: 'double'
            - Name: 'tile_x'
              Type: 'int'
            - Name: 'tile_y'
              Type: 'int'
            - Name: 'tile_z'
              Type: 'int'
            - Name: 'movement_speed'
              Type: 'double'
            - Name: 'accuracy'
              Type: 'double'
          Location: !Sub 's3://${ProcessedDataBucket}/location_events/'
          InputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'
        PartitionKeys:
          - Name: 'year'
            Type: 'string'
          - Name: 'month'
            Type: 'string'
          - Name: 'day'
            Type: 'string'
          - Name: 'hour'
            Type: 'string'

  # Glue ETL Job
  ETLJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Name: !Sub 'trumen-${Environment}-etl-pipeline'
      Role: !GetAtt GlueServiceRole.Arn
      Command:
        Name: 'glueetl'
        ScriptLocation: !Sub 's3://${ProcessedDataBucket}/scripts/glue_etl_pipeline.py'
        PythonVersion: '3'
      DefaultArguments:
        '--TempDir': !Sub 's3://${ProcessedDataBucket}/temp/'
        '--job-bookmark-option': 'job-bookmark-enable'
        '--enable-continuous-cloudwatch-log': 'true'
        '--enable-metrics': ''
      ExecutionProperty:
        MaxConcurrentRuns: 3
      GlueVersion: '4.0'
      MaxRetries: 1
      Timeout: 180
      WorkerType: 'G.1X'
      NumberOfWorkers: 10

  # IAM Roles
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'trumen-${Environment}-glue-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'glue.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: 'S3Access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub '${RawEventsBucket}/*'
                  - !Sub '${ProcessedDataBucket}/*'
                  - !Sub '${DruidDeepStorageBucket}/*'
                  - !Sub '${RawEventsBucket}'
                  - !Sub '${ProcessedDataBucket}'
                  - !Sub '${DruidDeepStorageBucket}'

  FraudDetectionServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'trumen-${Environment}-fraud-detection-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'KinesisReadAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:ListStreams'
                Resource: !GetAtt GameEventsStream.Arn
        - PolicyName: 'SNSPublishAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: !Ref FraudAlertTopic

  FraudDetectionInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref FraudDetectionServiceRole

  # SNS Topic for Fraud Alerts
  FraudAlertTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub 'trumen-${Environment}-fraud-alerts'
      DisplayName: 'Fraud Detection Alerts'

  # Security Groups
  DruidSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'trumen-${Environment}-druid-sg'
      GroupDescription: 'Security group for Druid cluster'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !Ref DashboardSecurityGroup
          Description: 'Broker API access from dashboard'
        - IpProtocol: 'tcp'
          FromPort: 8081
          ToPort: 8081
          CidrIp: '10.0.0.0/16'
          Description: 'Coordinator access within VPC'
        - IpProtocol: 'tcp'
          FromPort: 8083
          ToPort: 8083
          CidrIp: '10.0.0.0/16'
          Description: 'Historical access within VPC'
        - IpProtocol: 'tcp'
          FromPort: 8091
          ToPort: 8091
          CidrIp: '10.0.0.0/16'
          Description: 'Middle Manager access within VPC'

  DashboardSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'trumen-${Environment}-dashboard-sg'
      GroupDescription: 'Security group for dashboard API'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP access'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS access'

  FraudDetectionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'trumen-${Environment}-fraud-detection-sg'
      GroupDescription: 'Security group for fraud detection service'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'

  # Redis Cluster for Caching
  RedisSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      CacheSubnetGroupName: !Sub 'trumen-${Environment}-redis-subnet-group'
      Description: 'Subnet group for Redis cluster'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisCluster:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupId: !Sub 'trumen-${Environment}-redis'
      ReplicationGroupDescription: 'Redis cluster for caching'
      NodeType: 'cache.t3.micro'
      NumCacheClusters: 2
      Engine: 'redis'
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      AtRestEncryptionEnabled: true
      TransitEncryptionEnabled: true

  RedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub 'trumen-${Environment}-redis-sg'
      GroupDescription: 'Security group for Redis cluster'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref DashboardSecurityGroup
          Description: 'Redis access from dashboard'
        - IpProtocol: 'tcp'
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref FraudDetectionSecurityGroup
          Description: 'Redis access from fraud detection'

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub 'trumen-${Environment}-alb'
      Scheme: 'internet-facing'
      Type: 'application'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref DashboardSecurityGroup

  # CloudWatch Log Groups
  GlueLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/glue/trumen-${Environment}-etl-pipeline'
      RetentionInDays: 30

  FraudDetectionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/ec2/trumen-${Environment}-fraud-detection'
      RetentionInDays: 14

  # CloudWatch Alarms
  FraudAlertHighRiskAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub 'trumen-${Environment}-high-risk-fraud-alerts'
      AlarmDescription: 'High risk fraud alerts threshold'
      MetricName: 'HighRiskAlerts'
      Namespace: 'TrumenApp/FraudDetection'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref FraudAlertTopic

  KinesisRecordsAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub 'trumen-${Environment}-kinesis-records-high'
      AlarmDescription: 'High volume of Kinesis records'
      MetricName: 'IncomingRecords'
      Namespace: 'AWS/Kinesis'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'StreamName'
          Value: !Ref GameEventsStream

Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub '${Environment}-VPC-ID'

  KinesisStreamName:
    Description: 'Kinesis stream name'
    Value: !Ref GameEventsStream
    Export:
      Name: !Sub '${Environment}-KINESIS-STREAM'

  RawEventsBucketName:
    Description: 'S3 bucket for raw events'
    Value: !Ref RawEventsBucket
    Export:
      Name: !Sub '${Environment}-RAW-EVENTS-BUCKET'

  ProcessedDataBucketName:
    Description: 'S3 bucket for processed data'
    Value: !Ref ProcessedDataBucket
    Export:
      Name: !Sub '${Environment}-PROCESSED-DATA-BUCKET'

  DruidDeepStorageBucketName:
    Description: 'S3 bucket for Druid deep storage'
    Value: !Ref DruidDeepStorageBucket
    Export:
      Name: !Sub '${Environment}-DRUID-STORAGE-BUCKET'

  FraudAlertTopicArn:
    Description: 'SNS topic ARN for fraud alerts'
    Value: !Ref FraudAlertTopic
    Export:
      Name: !Sub '${Environment}-FRAUD-ALERT-TOPIC'

  RedisEndpoint:
    Description: 'Redis cluster endpoint'
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${Environment}-REDIS-ENDPOINT'

  LoadBalancerDNS:
    Description: 'Application Load Balancer DNS name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${Environment}-ALB-DNS'